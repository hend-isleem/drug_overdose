const supertest = require('supertest');
const chai = require('chai');
const chaiHttp = require('chai-http');
const expect = chai.expect;
const app = require('../src/modules/app/app.module.js');


app.set('trust proxy', false);
chai.use(chaiHttp);

describe('Contacts API', function() {
  let authToken;
  let randomeContact;
  let randomeContact_2;

  before(function(done) {
    this.timeout(10000);  // Set a timeout for async operations
    supertest(app)
      .post('/v1/auth/admin-login')
      .send({ email: 'admin@sesa1.com', password: 'password1' })
      .end((err, res) => {
        authToken = res.body.tokens.access.token;
        // console.log(">>>> ", authToken);
        done();
      });
  });

  it('should create a contact', function(done) {
    const contactData = {
      name: "Hend Isleem",
      phoneNumber: "123-456-0000",
      contactEmail: "Hend@example.com",
      subject: "Inquiry",
      message: "Hello, I am a contact generated by the test :)"
    };
    supertest(app)
      .post('/v1/contacts')
      .set('Authorization', `Bearer ${authToken}`)
      .send(contactData)
      .expect(204)
      .end((err, res) => {
        expect(res.status).to.equal(204);
        done();
      });
  });

  it('should retrieve a list of contacts', function(done) {
    supertest(app)
      .get('/v1/contacts')
      .set('Authorization', `Bearer ${authToken}`)
      .query({ page: 1, limit: 10 })
      .expect(200)
      .end((err, res) => {
        expect(res.body).to.be.an('object');
        expect(res.body.documents).to.be.an('array');
        randomeContact = res.body.documents[0];
        randomeContact_2 = res.body.documents[2];
        done();
      });
  });

  it('should retrieve a specific contact by ID', function(done) {
    const contactId = randomeContact._id;
    supertest(app)
      .get(`/v1/contacts/${contactId}`)
      .set('Authorization', `Bearer ${authToken}`)
      .expect(200)
      .end((err, res) => {
        expect(res.status).to.equal(200);
        expect(res.body).to.have.property('name').to.equal(randomeContact.name);
        expect(res.body).to.have.property('phoneNumber').to.equal(randomeContact.phoneNumber);
        expect(res.body).to.have.property('contactEmail').to.equal(randomeContact.contactEmail);
        done();
      });
  });

  it('should update a specific contact', function(done) {
    const contactId = randomeContact._id; 
    const updateData = {
      phoneNumber: "111-111-1111"
    };
    supertest(app)
      .patch(`/v1/contacts/${contactId}`)
      .set('Authorization', `Bearer ${authToken}`)
      .send(updateData)
      .expect(204)
      .end((err, res) => {
        expect(res.status).to.equal(204);
        supertest(app)
        .get(`/v1/contacts/${contactId}`)
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200)
        .end((err, res) => {
            expect(res.status).to.equal(200);
            expect(res.body).to.have.property('name').to.equal(randomeContact.name);
            expect(res.body).to.have.property('phoneNumber').to.equal(updateData.phoneNumber);
            expect(res.body).to.have.property('contactEmail').to.equal(randomeContact.contactEmail);
            done();
        });
      });
  });

  it('should delete a specific contact and confirm deletion', function(done) {
    const contactId = randomeContact_2._id; 
    supertest(app)
      .delete(`/v1/contacts/${contactId}`)
      .set('Authorization', `Bearer ${authToken}`)
      .expect(204)
      .end((err, res) => {
        if (err) return done(err);
        expect(res.status).to.equal(204);
  
        // Follow-up GET request to verify deletion
        supertest(app)
          .get(`/v1/contacts/${contactId}`)
          .set('Authorization', `Bearer ${authToken}`)
          .expect(404) // Expecting 'Not Found' status after deletion
          .end((error, response) => {
            if (error) {
              if (response && response.status === 404) {
                done(); // Test passes coz 404 is the expected response
              } else {
                return done(error); 
              }
            }
            expect(response.status).to.equal(404);
            // console.log(response);
            expect(response.body.message).to.equal("Not found!");
            done();
          });
      });
  });
});

